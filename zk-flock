#! /usr/bin/env python

from distributedflock import Zookeeper as ZK

import subprocess
import sys
import os
import time
import atexit
import json
import optparse

import signal

#========================================================================================

class Daemon(object):

    def __init__(self, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr

    def daemonize(self):
        """Double-fork magic"""
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError, err:
            sys.stderr.write("First fork failed: %d (%s)\n" % (err.errno, err.strerror))
            sys.exit(1)
        # decouple from parent environment
        os.chdir("/")
        os.setsid()
        os.umask(0)

        # Second fork
        try:
            pid = os.fork()
            if pid > 0:
                sys.exit(0)
        except OSError, err:
            sys.stderr.write("Second fork failed: %d (%s)\n" % (err.errno, err.strerror))
            sys.exit(1)
            
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'w')
        se = file(self.stderr, 'w')
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

    def start(self, *args):
        """
        Start  the daemon
        """

        self.daemonize()
        self.run(*args)

    def run(self, *args):
        pass

#===========================================================

def start_child(cmd):
    import shlex
    args = shlex.split(cmd)
    try:
        p = subprocess.Popen(args, close_fds=True)
    except OSError as err:
        print "OSError %s" % str(err)
    except ValueError as err:
        print "ValueError %s" % str(err)
    else:
        return p

def kill_child(prcs):
    if prcs.poll() is None:
        prcs.terminate()
    if prcs.poll() is None:
        prcs.kill()

def read_cfg(path):
    try:
        with open(path) as f:
            cfg = json.load(f)
            cfg['host']
            cfg['app_id']
            cfg['timeout']
    except KeyError as err:
        print "Missing parametr %s" % str(err)
    except Exception as err:
        print "Config error %s" % str(err)
        return None
    else:
        return cfg

def main(cmd_arg, zk_cfg):

    z = ZK.ZKLockServer(**cfg)
    if not z.getlock():
        print "Error"
        return

    def sigterm_and_sigchld_handle(signum, frame):
        print "Handle signal %d. Kill child"  % signum
        try:
            z.releaselock()
        except Exception as err:
            print str(err)
        finally:
            kill_child(p)
            sys.exit(1)

    p = start_child(cmd_arg)
    signal.signal(signal.SIGTERM, sigterm_and_sigchld_handle)
    signal.signal(signal.SIGCHLD, sigterm_and_sigchld_handle)
    while True:
        if not z.checkLock():
            try:
                kill_child(p)
                z.destroy()
            except Exception as err:
                print str(err)
            finally:
                return
        time.sleep(1)

#===============================================
#===============================================

if __name__ == "__main__":
    usage = "Usage: %prog LOCKNAME COMMAND [-cdh]"
    parser = optparse.OptionParser(usage)
    parser.add_option("-d", "--daemonize", action="store_true",dest="isdaemonize", default=False, help="Daemonize this")
    parser.add_option("-c", "--confpath", action="store", dest="confpath", default="/etc/distributed-flock.json",\
                                                        help="Configuration file. default: /etc/distributed-flock.json")
    (options, args) = parser.parse_args()
    if len(args) == 2:
        pid_name = args[0]
        cmd_arg = args[1]
    else:
        print "Wrong count of arguments"
        parser.print_help()
        sys.exit(1)
    cfg = read_cfg(options.confpath)
    if cfg is None:
        print "Unable to read configuration file: %s" % options.confpath
        sys.exit(1)
    cfg['name'] = pid_name
    if options.isdaemonize:
        daemon = Daemon()
        daemon.run = main
        daemon.start(cmd_arg, cfg)
    else:
        main(cmd_arg, cfg)
